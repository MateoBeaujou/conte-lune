@import "tailwindcss";
@plugin "daisyui";
:root { --bg: #0b1020; --moon: #f2f2f2; }
body { background: var(--bg); color: #f7f7f7; }
@font-face {
  font-family: "Avenir Next";
  src: url("assets/fonts/avenir-next-regular.ttf") format("truetype");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

/* Police par défaut du site */
:root{
  --font-sans: "Avenir Next", system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
}
body{ font-family: var(--font-sans); }

/* --- Position/tailles au pixel près --- */
.px-pos {
  /* place depuis le coin haut-gauche du slide */
  transform:
    translate(var(--px-x, 0px), var(--px-y, 0px))
    rotate(var(--px-rot, 0deg));
  width:  var(--px-w, 40px);
  height: var(--px-h, 40px);
}

/* Carré lumineux (personnalisable à fond) */
.light-square {
  position: relative;
  display: block;
  background: color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-alpha, 100%), transparent) ;
  border-radius: var(--ls-radius, 6px);
  border: var(--ls-border, 0px) solid var(--ls-border-color, rgba(237,203,106,0.6));
  /* halo externe + interne */
  box-shadow:
    inset 0 0 var(--ls-blur-inset, 0px) color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-inset-alpha, 0%), transparent),
    0 0 0 var(--ls-glow, 14px) color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-glow-alpha, 18%), transparent),
    0 0 var(--ls-blur, 18px) color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-blur-alpha, 55%), transparent);
  animation: lsPulse var(--ls-speed, 1600ms) var(--ls-ease, ease-in-out) var(--ls-delay, 0ms) infinite;
}

@keyframes lsPulse {
  0%   { filter: brightness(var(--ls-bright-min, 0.95)); }
  50%  { filter: brightness(var(--ls-bright-max, 1.06)); 
         box-shadow:
          inset 0 0 calc(var(--ls-blur-inset, 0px) * 1.1) color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-inset-alpha, 0%), transparent),
          0 0 0 calc(var(--ls-glow, 14px) * var(--ls-glow-spread, 1.4)) color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-glow-alpha, 0%), transparent),
          0 0 calc(var(--ls-blur, 18px) * 1.2) color-mix(in oklab, var(--ls-fill, #EDCB6A) var(--ls-blur-alpha, 70%), transparent); }
  100% { filter: brightness(var(--ls-bright-min, 0.95)); }
}

@media (prefers-reduced-motion: reduce) { .light-square { animation: none !important; } }



/* Buisson : secoue seulement en X (reste parfaitement droit) */
@keyframes bushShakeLR {
  0%   { transform: translateX(0) }
  12%  { transform: translateX(var(--shake-x, -1.4%)) }
  24%  { transform: translateX(1.1%) }
  36%  { transform: translateX(-0.9%) }
  48%  { transform: translateX(0.7%) }
  60%  { transform: translateX(-1.0%) }
  72%  { transform: translateX(0.6%) }
  84%  { transform: translateX(-0.4%) }
  100% { transform: translateX(0) }
}
.anim-bush-lr {
  animation: bushShakeLR var(--shake-duration, 900ms) ease-in-out var(--shake-delay, 0ms) infinite;
  /* pas de rotate, pas de translateY -> reste droit */
  transform-origin: bottom center;
}

/* accessibilité */
@media (prefers-reduced-motion: reduce) {
  .anim-bush-lr { animation: none !important; }
}



/* ===== Arbre qui tangue (balancement souple) ===== */
@keyframes treeSway {
  0%   { transform: rotate(calc(-1 * var(--sway-deg, 4deg))) }
  50%  { transform: rotate(var(--sway-deg, 4deg)) }
  100% { transform: rotate(calc(-1 * var(--sway-deg, 4deg))) }
}

.anim-tree {
  animation: treeSway var(--sway-duration, 2200ms) ease-in-out var(--sway-delay, 0ms) infinite;
  transform-origin: bottom center; /* pivot au pied du tronc */
}

/* Variante vent fort (optionnelle) */
.anim-tree-strong {
  --sway-deg: 7deg;
  --sway-duration: 1800ms;
}

/* Accessibilité */
@media (prefers-reduced-motion: reduce) {
  .anim-tree { animation: none !important; }
}


/* Avance de gauche -> droite (conserve ton transform existant) */
@keyframes walkLTR {
  from { transform: var(--base-transform, translate(-50%, -50%)) translateX(0); }
  to   { transform: var(--base-transform, translate(-50%, -50%)) translateX(var(--walk-distance, 40vw)); }
}
.walk-ltr {
  animation: walkLTR var(--walk-duration, 12s) linear var(--walk-delay, 0ms) var(--walk-iter, infinite);
  will-change: transform;
}

/* Variante: une seule fois et rester au bout */
.walk-once {
  animation-iteration-count: 1;
  animation-fill-mode: forwards; /* reste à la fin */
}

/* Accessibilité */
@media (prefers-reduced-motion: reduce) {
  .walk-ltr { animation: none !important; }
}


/* Halo circulaire — visible, unique animation */
@keyframes moonCircleHalo {
  0% {
    opacity: .52;
    filter: blur(14px);
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: .100;                  /* plus lumineux au milieu */
    filter: blur(16px);            /* halo un peu plus diffus */
    transform: translate(-50%, -50%) scale(1.04); /* léger zoom */
  }
  100% {
    opacity: .52;
    filter: blur(14px);
    transform: translate(-50%, -50%) scale(1);
  }
}

.moon-circle-halo {
  width: 8vw;               /* taille du halo (augmente/réduis si besoin) */
  height: 8vw;
  border-radius: 8%;
  background:
    radial-gradient(closest-side,
      rgba(237,203,106,0) 50%,
      rgba(237,203,106,.42) 72%,
      rgba(237,203,106,0) 92%);
  position: absolute;        /* pour l’utiliser en overlay */
  left: 0; top: 0;
  animation: moonCircleHalo 1800ms ease-in-out infinite; /* ← L’ANIMATION */
  pointer-events: none;
}
/* ===== Fumée réaliste simple (2 bouffées douces) ===== */
@keyframes smokeDrift {
  0%   { opacity: 0;   transform: translate(-50%, 0) scale(0.7); }
  12%  { opacity: var(--smk-alpha, .45); }
  25%  { transform: translate(calc(-50% - 4%), -25%) scale(0.95); }
  50%  { transform: translate(calc(-50% + 3%), -55%) scale(1.25); }
  75%  { opacity: calc(var(--smk-alpha, .45) * .65);
         transform: translate(calc(-50% - 2%), -85%) scale(1.5); }
  100% { opacity: 0;   transform: translate(-50%, -115%) scale(1.7); }
}

.smoke-soft {
  position: relative;
  width: var(--smk-w, 6vw);          /* largeur zone de fumée */
  height: var(--smk-h, 20vw);        /* hauteur de montée   */
  pointer-events: none;
  overflow: visible;
}

/* deux bouffées générées en pseudo-éléments */
.smoke-soft::before,
.smoke-soft::after {
  content: "";
  position: absolute;
  left: 50%; bottom: 0;
  width: var(--puff-1, 2.6vw);
  height: var(--puff-1, 2.6vw);
  border-radius: 50%;
  background: radial-gradient(50% 60% at 50% 50%,
    rgba(245,245,245,0.95) 0%,
    rgba(245,245,245,0.45) 45%,
    rgba(245,245,245,0.15) 70%,
    rgba(245,245,245,0.00) 85%);
  filter: blur(var(--smk-blur, 1.2px));
  transform: translate(-50%, 0) scale(1);
  opacity: 0;
  animation: smokeDrift var(--rise-1, 4.6s) ease-out infinite;
  animation-delay: var(--delay-1, 0s);
}

/* seconde bouffée, un peu plus grande et décalée */
.smoke-soft::after {
  width: var(--puff-2, 3.0vw);
  height: var(--puff-2, 3.0vw);
  animation-duration: var(--rise-2, 5.0s);
  animation-delay: var(--delay-2, 1.2s);
}

/* Variante plus visible (optionnelle) */
.smoke-soft--bold {
  --smk-alpha: .55;
  --smk-blur: 1.6px;
  --puff-1: 3.0vw;
  --puff-2: 3.4vw;
}
@media (prefers-reduced-motion: reduce) {
  .smoke-soft::before, .smoke-soft::after { animation: none !important; opacity: .35; }
}


/* Avance en X + rétrécit (option: léger blur/opacité) */
@keyframes walkXShrink {
  0% {
    opacity: var(--start-opacity, 1);
    filter: blur(var(--start-blur, 0));
    transform: var(--base-transform, translate(-50%, -50%))
               translateX(0) scale(var(--start-scale, 1));
  }
  100% {
    opacity: var(--end-opacity, 1);          /* ex: 0.9 pour un peu de distance */
    filter: blur(var(--end-blur, 0));        /* ex: 0.4px pour un effet subtil */
    transform: var(--base-transform, translate(-50%, -50%))
               translateX(var(--walk-distance, 40vw))
               scale(var(--end-scale, 0.8)); /* ← rétrécit pendant l'avance */
  }
}

.walk-x-shrink {
  animation: walkXShrink var(--walk-duration, 12s) linear var(--walk-delay, 0ms) var(--walk-iter, infinite);
  will-change: transform, opacity, filter;
}

/* Une seule fois et rester à la fin (optionnel) */
.walk-x-once { animation-iteration-count: 1; animation-fill-mode: forwards; }


/* Avance en diagonale : de droite -> gauche en descendant.
   La direction et l’échelle se règlent via les variables --dx, --dy, --start-scale, --end-scale. */
@keyframes walkDiag {
  from {
    transform: var(--base-transform, translate(-50%, -50%))
               translate(0, 0)
               scale(var(--start-scale, 1));
  }
  to {
    transform: var(--base-transform, translate(-50%, -50%))
               translate(var(--dx, 24vw), var(--dy, -8vw)) /* +X=→ droite, -X=← gauche ; +Y=descend */
               scale(var(--end-scale, 1));
  }
}

.walk-diag {
  animation: walkDiag var(--dur, 10s) linear var(--delay, 0ms) var(--iter, infinite);
  will-change: transform;
}

/* Jouer une seule fois et rester à la fin */
.walk-once {
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
}

/* Déplacement simple gauche -> droite */
@keyframes walkX {
  from { transform: var(--base-transform, translate(-50%, -50%)) translateX(0); }
  to   { transform: var(--base-transform, translate(-50%, -50%)) translateX(var(--walk-distance, 30vw)); }
}

.walk-x {
  animation: walkX var(--walk-duration, 10s) linear var(--walk-delay, 0ms) var(--walk-iter, infinite);
  will-change: transform;
}

/* Option pour jouer 1 fois et rester à la fin */
.walk-once { animation-iteration-count: 1; animation-fill-mode: forwards; }


/* ===== Parle (léger hochement + micro squash/stretch) ===== */
@keyframes talkMotion {
  0%   { transform: var(--base-transform, translate(-50%, -50%)) translateY(0)       scale(1, 1); }
  25%  { transform: var(--base-transform, translate(-50%, -50%)) translateY(-1.2%)  scale(1.008, 0.992); }
  50%  { transform: var(--base-transform, translate(-50%, -50%)) translateY(0.4%)   scale(0.995, 1.005); }
  75%  { transform: var(--base-transform, translate(-50%, -50%)) translateY(-0.8%)  scale(1.006, 0.994); }
  100% { transform: var(--base-transform, translate(-50%, -50%)) translateY(0)       scale(1, 1); }
}

.talk {
  animation: talkMotion var(--talk-speed, 1100ms) var(--talk-ease, ease-in-out)
             var(--talk-delay, 0ms) infinite;
  transform-origin: bottom center; /* pivot sur les pieds */
  will-change: transform;
}

/* Option : “pause” (pour couper l’anim quand tu veux) */
.talk-pause { animation-play-state: paused; }

/* Accessibilité */
@media (prefers-reduced-motion: reduce) { .talk { animation: none !important; } }


@keyframes walkX {
  from { transform: var(--base-transform, translate(-50%, -50%)) translateX(0); }
  to   { transform: var(--base-transform, translate(-50%, -50%)) translateX(var(--walk-distance, 30vw)); }
}

.walk-x {
  animation: walkX var(--walk-duration, 10s) linear var(--walk-delay, 0ms) var(--walk-iter, infinite);
  will-change: transform;
}

/* jouer une seule fois et rester à la fin (optionnel) */
.walk-once { animation-iteration-count: 1; animation-fill-mode: forwards; }

/* Pulse visible (mêmes noms uniques) */
@keyframes lunarHaloPulseStrong {
  0%   { opacity: var(--lh-op-min, .65); filter: blur(var(--lh-blur, 18px)); transform: scale(1); }
  50%  { opacity: var(--lh-op-max, .95); filter: blur(calc(var(--lh-blur, 18px) * 1.2)); transform: scale(1.05); }
  100% { opacity: var(--lh-op-min, .65); filter: blur(var(--lh-blur, 18px)); transform: scale(1); }
}

/* Halo très visible : anneau blanc + couronne dorée + glow externe */
.lunar-halo-boost {
  position: relative;
  width: var(--lh-size, 26vw);
  height: var(--lh-size, 26vw);
  border-radius: 50%;
  pointer-events: none;
  /* Couronne dorée plus opaque (passe au-dessus des fonds sombres) */
  background:
    radial-gradient(closest-side,
      rgba(237,203,106,0) 46%,
      rgba(237,203,106,.55) 63%,
      rgba(237,203,106,.32) 78%,
      rgba(0,0,0,0) 92%);
  animation: lunarHaloPulseStrong var(--lh-speed, 1600ms) ease-in-out infinite;
  /* Sur fonds très chargés, ça aide beaucoup */
  mix-blend-mode: screen; /* si ton fond est clair et que ça “disparaît”, retire cette ligne */
}

/* Anneau/blanc et glow externe pour “percer” les fonds */
.lunar-halo-boost::before,
.lunar-halo-boost::after {
  content:"";
  position:absolute; inset:-10%;
  border-radius:50%;
  pointer-events:none;
}

/* Anneau blanc fin (très visible) */
.lunar-halo-boost::before {
  background:
    radial-gradient(closest-side,
      transparent 58%,
      rgba(255,255,255,.95) 60%,
      rgba(255,255,255,.55) 64%,
      transparent 70%);
  filter: blur(2px);
}

/* Glow externe large */
.lunar-halo-boost::after {
  inset:-22%;
  background:
    radial-gradient(60% 70% at 50% 50%,
      rgba(255,230,170,.45) 0%,
      rgba(255,180,80,.28) 45%,
      rgba(0,0,0,0) 80%);
  filter: blur(var(--lh-glow-blur, 20px));
  opacity: var(--lh-glow-alpha, .9);
}

/* Accessibilité */
@media (prefers-reduced-motion: reduce){
  .lunar-halo-boost { animation: none !important; }
}

/* Personnage qui grimpe le long d'un axe incliné */
@keyframes climbPath {
  from {
    transform: var(--base-transform, translate(-50%, -50%))
               rotate(var(--climb-angle, -15deg))
               translate(0, 0);
  }
  to {
    transform: var(--base-transform, translate(-50%, -50%))
               rotate(var(--climb-angle, -15deg))
               translate(0, calc(-1 * var(--climb-distance, 35vh)));
  }
}

/* ====== Personnage qui grimpe (base) ====== */
/* Le perso suit un axe incliné (rotate) et se déplace le long de cet axe (translateY) */
@keyframes climbPath {
  from {
    transform: var(--base-transform, translate(-50%, -50%))
               rotate(var(--climb-angle, -15deg))
               translate(0, 0);
  }
  to {
    transform: var(--base-transform, translate(-50%, -50%))
               rotate(var(--climb-angle, -15deg))
               translate(0, calc(-1 * var(--climb-distance, 35vh)));
  }
}

/* 1) Exécution une seule fois (arrive en haut et reste) */
.climb {
  animation: climbPath var(--climb-duration, 6s)
            var(--climb-ease, ease-in-out)
            var(--climb-delay, 0ms)
            1 forwards;
  transform-origin: bottom center;
  will-change: transform;
}

/* 2) Infini en aller-retour (ping-pong) — naturel et fluide */
.climb-infinite {
  animation: climbPath var(--climb-duration, 7s)
            var(--climb-ease, ease-in-out)
            var(--climb-delay, 0ms)
            infinite;
  animation-direction: alternate; /* monte puis redescend */
  transform-origin: bottom center;
  will-change: transform;
}

/* 3) Infini toujours vers le haut + reset instantané en bas (flux continu) */
@keyframes climbLoopUp {
  0%   { transform: var(--base-transform, translate(-50%, -50%))
                     rotate(var(--climb-angle, -15deg))
                     translate(0, 0); }
  99%  { transform: var(--base-transform, translate(-50%, -50%))
                     rotate(var(--climb-angle, -15deg))
                     translate(0, calc(-1 * var(--climb-distance, 35vh))); }
  100% { transform: var(--base-transform, translate(-50%, -50%))
                     rotate(var(--climb-angle, -15deg))
                     translate(0, 0); } /* reset */
}
.climb-loop-up {
  animation: climbLoopUp var(--climb-duration, 7s)
            linear
            var(--climb-delay, 0ms)
            infinite;
  transform-origin: bottom center;
  will-change: transform;
}

/* (Optionnel) utilitaire pour positionner en pixels au mm près */
.px-pos {
  transform:
    translate(var(--px-x, 0px), var(--px-y, 0px))
    rotate(var(--px-rot, 0deg));
  width:  var(--px-w, 90px);
  height: var(--px-h, 135px);
}

/* Accessibilité */
@media (prefers-reduced-motion: reduce) {
  .climb, .climb-infinite, .climb-loop-up { animation: none !important; }
}

/* ===== Ronde 3D (perspective + bascule X/Y) ===== */
@keyframes round3D {
  0% {
    transform:
      var(--base-transform, translate(-50%, -50%))
      perspective(var(--rd-persp, 700px))
      rotateZ(0deg)
      rotateX(var(--rd-tilt-x, 12deg))
      rotateY(var(--rd-tilt-y, -6deg))
      scale(1);
    filter: brightness(var(--rd-bright-min, .98));
  }
  50% {
    transform:
      var(--base-transform, translate(-50%, -50%))
      perspective(var(--rd-persp, 700px))
      rotateZ(180deg)
      rotateX(calc(var(--rd-tilt-x, 12deg) * -1))
      rotateY(calc(var(--rd-tilt-y, -6deg) * -1))
      scale(1.01); /* micro “souffle” */
    filter: brightness(var(--rd-bright-max, 1.03));
  }
  100% {
    transform:
      var(--base-transform, translate(-50%, -50%))
      perspective(var(--rd-persp, 700px))
      rotateZ(360deg)
      rotateX(var(--rd-tilt-x, 12deg))
      rotateY(var(--rd-tilt-y, -6deg))
      scale(1);
    filter: brightness(var(--rd-bright-min, .98));
  }
}

.round-dance-3d {
  animation: round3D var(--rd-duration, 16s)
             var(--rd-ease, linear)
             var(--rd-delay, 0ms) infinite;
  transform-origin: center center;
  will-change: transform, filter;
  /* petite ombre elliptique optionnelle sous la ronde */
  position: relative;
}
.round-dance-3d::after {
  content: "";
  position: absolute; left: 50%; top: 100%;
  width: 70%; height: 10%;
  transform: translate(-50%, -40%);
  border-radius: 50%;
  background: radial-gradient(closest-side, rgba(0,0,0,.25), rgba(0,0,0,0));
  filter: blur(4px);
  opacity: var(--rd-shadow, .35);
  pointer-events: none;
}

/* Variantes rapides */
.round3d-slow    { --rd-duration: 22s; }
.round3d-fast    { --rd-duration: 9s;  }
.round3d-reverse { animation-direction: reverse; }

@media (prefers-reduced-motion: reduce) {
  .round-dance-3d { animation: none !important; }
}
/* Même respiration que ton halo de lune */
@keyframes haloBreath {
  from { opacity: var(--halo-alpha, .35); filter: blur(var(--halo-blur, 8px)); }
  to   { opacity: calc(var(--halo-alpha, .35) + .15); filter: blur(calc(var(--halo-blur, 8px) * 1.15)); }
}

/* Conteneur demi-cercle (ne montre que la moitié haute du disque) */
.light-halo-arc {
  position: relative;
  width: var(--halo-size, 12vw);
  height: calc(var(--halo-size, 12vw) / 2);
  border-radius: 100% 100% 0 0 / 100% 100% 0 0; /* demi-disque haut */
  overflow: hidden;
  pointer-events: none;
}

/* Le halo “lune” original, mais rendu dans un cercle entier… */
.light-halo-arc::before {
  content: "";
  position: absolute;
  left: 50%;
  bottom: calc(-0.5 * var(--halo-size, 12vw)); /* centre du cercle pile sur le bas du conteneur */
  width: var(--halo-size, 12vw);
  height: var(--halo-size, 12vw);
  transform: translateX(-50%);
  border-radius: 50%;
  /* …avec la même couronne douce que ton halo rond */
  background:
    radial-gradient(closest-side,
      rgba(237,203,106,0) 58%,
      rgba(237,203,106,.28) 78%,
      rgba(237,203,106,0) 92%);
  /* option : épaisseur de l’anneau (si tu veux le rendre plus fin/épais) */
  -webkit-mask: radial-gradient(circle,
    transparent calc(50% - var(--halo-thick, 10px)),
    #000       calc(50% - var(--halo-thick, 10px)),
    #000 51%,
    transparent 52%);
          mask: radial-gradient(circle,
    transparent calc(50% - var(--halo-thick, 10px)),
    #000       calc(50% - var(--halo-thick, 10px)),
    #000 51%,
    transparent 52%);
  animation: haloBreath var(--halo-speed, 2600ms) ease-in-out infinite alternate;
  filter: blur(var(--halo-blur, 8px));
  opacity: var(--halo-alpha, .35);
}

/* (facultatif) Rotation de l’arc si tu veux l’orienter autrement */
.halo-arc-rotate {
  transform: rotate(var(--halo-arc-angle, 0deg));
  transform-origin: center;
}

/* Accessibilité */
@media (prefers-reduced-motion: reduce) {
  .light-halo-arc::before { animation: none !important; }
}
